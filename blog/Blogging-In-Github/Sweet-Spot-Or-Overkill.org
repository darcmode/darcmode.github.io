#+TITLE: Blogging in GitHub: Sweet spot or overkill?
#+DATE: 2023-10-09
#+AUTHOR: arcmode
#+KEYWORDS: pandoc, blogging-systems, github, org-mode, gnu-make
#+DESCRIPTION: A custom blogging system leveraging Pandoc, GitHub Pages, GNU Make and Org Mode

* Hello world
Hey there, this is the first post on my personal blog. The blog and each post is going to be generated with [[http://pandoc.org/][Pandoc]] from Markdown, Org and LaTeX files and it will be published as a GitHub page. The rest of this document describes the motivation, ideas and learnings around this process. In the following sections I explain the motivation behind each tool I am planning to use.

* Goals
I also want to follow a few goals for the development of my blogging system.

1. Don't reinvent the wheel. Reuse standard tools when possible
2. Use the minimum amount of code that is reasonable for each task
3. Write posts about the development of the blogging system itself
4. Have fun!

Hopefully this approach will provide me with a sweet spot for my goals for casual blogging and will not turn out to be an overkill. I have tried other approaches in the past like Postachio and Medium and both were fun but I tend to spend more time working on side projects than writing about them, so I figured that perhaps if my side project is actually about how to write about side projects I might be able to find a good balance.

* The tools I am using and why
A couple of years ago I found examples of people using this approach so I decided to make my own borrwing some code snippets that I needed to get started.

** Pandoc
[[https://pandoc.org/][Pandoc]] is a great tool for publishing and converting documents that understands multiple formats. It makes sense for my blog to leverage Pandoc instead of writting HTML files directly because it offers me the ability to mix different sources like Markdown, Org mode and LaTeX all of which suit different use cases. For example, Markdown is great for simple documents and Pandoc allows you to target GirHub Flavoured Markdown which is cool, because that means I can use it to turn the landing page of my personal website into a =Readme.md= file for my GitHub Profile. When I need to include source files or snippets in a given article, I can choose Org mode as source and leverage the plethora of features baked into it. If I want to write something that involves any math, I can use LaTeX either as a standaline =.tex= file or within Org mode.

** GitHub Pages
Github pages are just great. It allows you to quickly deploy a website and being GitHub it makes even more convenient for deploying a simple website because it is directly tied to your repository's remote, so all you have to do to deploy is to =git push=.

** GNU Make
[[https://www.gnu.org/software/make/][GNU Make]] is a tool for working with source files, generally used in C/C++ codebases but not limited to that domain. It has a rich set of features that allow you to maintain build graphs of different levels of complexity. In this case I plan to use a single Makefile to convert the source files with Pandoc and to deploy the results to Github.

In summary, the tools I am using at the moment for each concern are the following:

1. Posts source
   1. MarkDown
   2. Org mode
   3. LaTeX
2. Build system
   1. GNU Make
   2. Pandoc
3. Deployment system
   1. GNU Make
   2. GitHub Pages

** Why Org mode
The initial setup for this blog was based on Markdown only but given Pandoc offers Org mode support I figured it would be a great option to have as well.

Some of the things I like the most about Org mode:

1. Emacs support
2. Pandoc compatible
3. Multi-purpose: documentation, literate coding, blogging, writing, etc...

** Why LaTeX
I fell in love with LaTeX when I was a student. I don't have a good excuse yet to use it in the blog but I am
hoping to find one soon. Until then I will not expand on it. If you are not familiar with LaTeX don't worry as it is not
required for anything related to blogging or anything at all regarding how to publish your blog as a GitHub Page.

* Architecture
The entire architecture is encapsulated in a single Makefile and the contract it defines
with the source files in terms of directory structures and file extensions.

** Files and directories structure

For example, files with supported extensions for the blogging source files are expected to
be present at =blog/*/*.{md,org,text}= where the first level after blog signifies a given
series of posts as a filesystem directory and the second one is expected to target each individual post under that series.

** Boilerplate scripts

This structure will require three small scripts in order to generate index files for the blog root and for each series. For this I am using some python scripts I borrowed long time ago. I have tried to find the
original author to given them credit but have not been able to.

The first file to cover converts directory paths to titles. This is used to create a title for the index file of each series.
#+INCLUDE: "../../scripts/directory2title.py" src python -n

The second file converts a list of filenames to an index. This is used to build the actual index of each series.
#+INCLUDE: "../../scripts/filename2index.py" src python -n

The third file converts directory paths to an index. This is used to build the root index for the entire blog.
#+INCLUDE: "../../scripts/directory2index.py" src python -n

** Build and deployment

Currently the repository contains two deployment targets managed as git remotes. This works because GitHub automatically deploys
the static files on repositories following their guidelines. You can google for GitHub pages and GitHub profiles to learn about the details.

The blog and profile are generated as different folders using Pandoc, then each output
is pushed to the respective git remote. The blog uses =origin= and the profile page uses a git sub-tree targeting it's own remote. I will cover this in more detail shortly.

I like to split my =Makefile='s because it makes it easier to maintain in the longer term. The first file to look at
is =variables.mk= which declares all the needed directory paths for inputs and outpus.
#+INCLUDE: "../../build/variables.mk" src makefile -n

The second file is =blog.mk= which defines the build graph for the blog posts, the blog index and the index for each series.
#+INCLUDE: "../../build/blog.mk" src makefile -n

The third file is =index.mk= which builds the landing page for the personal website. The blog will sit in a sub-directory.
#+INCLUDE: "../../build/index.mk" src makefile -n

Next, we have =deployment.mk= which manages the deploy commands and the initialization logic for settiing up the git remotes and subtrees.
#+INCLUDE: "../../build/deployment.mk" src makefile -n

Finally, we have the actual =Makefile= which ties everything together and declares the build targets we will use.
#+INCLUDE: "../../Makefile" src makefile -n
